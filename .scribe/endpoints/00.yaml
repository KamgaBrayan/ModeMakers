name: Authentication
description: ''
endpoints:
  -
    httpMethods:
      - POST
    uri: api/auth/register
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Registers a new user and provides a JWT token upon success.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: "The user's full name."
        required: true
        example: gabriel
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: "The user's email address."
        required: true
        example: gabriel@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: "The user's password."
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: "The user's password confirmation."
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: gabriel
      email: gabriel@example.com
      password: password123
      password_confirmation: password123
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
           "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
           "token_type": "bearer",
           "expires_in": 3600,
           "user": {
               "id": 1,
               "name": "gabriel",
               "email": "gabriel@example.com"
           }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
           "error": "Validation error",
           "details": {
               "email": "The email field is required."
           }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
           "error": "An unexpected error occurred. Please try again later."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/login
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Authenticates a user and provides an access token.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: "The user's email address."
        required: true
        example: gabriel@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: "The user's password."
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: gabriel@example.com
      password: password123
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
           "token_type": "bearer",
           "expires_in": 3600
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
           "error": "Invalid credentials"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
           "error": "Could not create token"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/logout
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Logs out the authenticated user by invalidating their access token.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "message": "Successfully logged out."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
           "error": "Invalid or missing token."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/auth/profile
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Fetches the profile of the authenticated user.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "id": 1,
           "name": "gabriel",
           "email": "gabriel@example.com",
           "profile_picture_url": "http://localhost/storage/profile_pictures/gabriel.jpg"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
           "error": "Token expired"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
           "error": "User not found"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
